{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","count","AppWithRedux","v1","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todolistTasks","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.132019f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm is called\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n} );\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {FilterValuesType} from './App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist is called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    count: []\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useCallback, useReducer, useState} from 'react'\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n/*\r\nconst Fake = React.memo(function() {\r\n    console.log(\"FAKE\")\r\n    const arr = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks.count)\r\n    return <h1>{arr.length}</h1>\r\n})\r\n*/\r\n\r\nfunction AppWithRedux() {\r\n    console.log(\"App is called\")\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback( (id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback( (title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}